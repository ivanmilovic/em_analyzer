name: Fill Release Notes from uploaded manifest

on:
  release:
    types: [published, edited]

jobs:
  notes:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # 1) Preuzmi manifest.json iz aktuelnog release-a
      - name: Download manifest.json
        uses: robinraju/release-downloader@v1.8
        with:
          tag: ${{ github.event.release.tag_name }}
          fileName: "manifest.json"
          out-file-path: "release_assets"

      # (debug) Prikazi manifest
      - name: Show manifest.json
        run: cat release_assets/manifest.json

      # 2) Postavi TAG iz dogadjaja i iscitaj SHA256 (i VERSION opcionalno) iz manifesta
      - name: Parse manifest + set env
        run: |
          echo "TAG=${{ github.event.release.tag_name }}" >> $GITHUB_ENV
          node -e "const fs=require('fs');const m=JSON.parse(fs.readFileSync('release_assets/manifest.json','utf8'));
          if(!m.sha256){process.exitCode=1;console.error('manifest.json must contain sha256');}
          if(m.version){console.log('VERSION='+m.version);}
          console.log('SHA256='+m.sha256);" >> $GITHUB_ENV

      # 3) Renderuj release notes iz sablona (u root-u repo-a)
      - name: Render release notes
        run: |
          sed -e "s/{{TAG}}/${TAG}/g" \
              -e "s/{{SHA256}}/${SHA256}/g" \
              release_notes_template.md > RELEASE_BODY.md

      # 4) Azuriraj telo postojeceg release-a
      - name: Update GitHub Release body
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const body = fs.readFileSync('RELEASE_BODY.md','utf8');
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: context.payload.release.id,
              body
            });
